{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","periodo","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","concat","catch","Error","erro","get","map","Date","n","data","quantidade","valor","console","log","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente","error"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoes(periodo){\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n            .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\n    }\n\n    obterNegociacoesDaSemana(){\n\n        return this._http\n            .get(\"negociacoes/semana\")\n            .then(negociacoes => negociacoes.map(n => new Negociacao(new Date(n.data), n.quantidade, n.valor)))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível obter as negociações da semana!\");\n            });\n\n    }\n\n    obterNegociacoesDaSemanaAnterior(){\n\n        return this._http\n            .get(\"negociacoes/anterior\")\n            .then(negociacoes => negociacoes.map(n => new Negociacao(new Date(n.data), n.quantidade, n.valor)))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível obter as negociações da semana passada!\");\n            });\n\n    }\n\n    obterNegociacoesDaSemanaRetrasada(){\n\n        return this._http\n            .get(\"negociacoes/retrasada\")\n            .then(negociacoes => negociacoes.map(n => new Negociacao(new Date(n.data), n.quantidade, n.valor)))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível obter as negociações da semana retrasada!\");\n            });\n    }\n\n    cadastra(negociacao){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(() => {\n                throw new Error('Não foi possívell adicionar a negociação')\n            });\n    }\n\n    lista(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            })\n    }\n\n    apaga(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(() => {\n                console.log(erro);\n                throw new Error ('Não foi possível adicionar as negociações');\n            });\n    }\n\n    importa(listaAtual){\n\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch(error => {\n                console.log(error)\n                throw new Error('Não foi possível buscar negociações para importar')\n            });\n    }\n\n}\n"]}