{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","periodo","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","concat","catch","Error","erro","get","map","Negociacao","Date","n","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente","error"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoes(periodo){\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n            .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\n    }\n\n    obterNegociacoesDaSemana(){\n\n        return this._http\n            .get(\"negociacoes/semana\")\n            .then(negociacoes => negociacoes.map(n => new Negociacao(new Date(n.data), n.quantidade, n.valor)))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível obter as negociações da semana!\");\n            });\n\n    }\n\n    obterNegociacoesDaSemanaAnterior(){\n\n        return this._http\n            .get(\"negociacoes/anterior\")\n            .then(negociacoes => negociacoes.map(n => new Negociacao(new Date(n.data), n.quantidade, n.valor)))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível obter as negociações da semana passada!\");\n            });\n\n    }\n\n    obterNegociacoesDaSemanaRetrasada(){\n\n        return this._http\n            .get(\"negociacoes/retrasada\")\n            .then(negociacoes => negociacoes.map(n => new Negociacao(new Date(n.data), n.quantidade, n.valor)))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível obter as negociações da semana retrasada!\");\n            });\n    }\n\n    cadastra(negociacao){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(() => {\n                throw new Error('Não foi possívell adicionar a negociação')\n            });\n    }\n\n    lista(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            })\n    }\n\n    apaga(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(() => {\n                console.log(erro);\n                throw new Error ('Não foi possível adicionar as negociações');\n            });\n    }\n\n    importa(listaAtual){\n\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch(error => {\n                console.log(error)\n                throw new Error('Não foi possível buscar negociações para importar')\n            });\n    }\n\n}\n"]}